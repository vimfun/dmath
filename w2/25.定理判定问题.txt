[音乐] 嗯，您好，欢迎回来。 接下来呢，我们来讨论一个问题 就是所谓的定理判定的问题，也就是说一个 定理，一个命题公式它是不是一个定理，它能不能找到 这个证明的序列。 我们先回顾一下这个形式系统它的本质 实际上呢我们说形式系统呢它会 它会构造一个字符串的集合，那么因为形式系统的定义， 它整个的可以看做是一个符号上集合的一个
构造性的定义，所谓构造性的定义呢它就是会提供一些规则 来从无到有，或者说从少到多生成整个的这个字符串的集合。 那么在形式系统当中，它的这个符号体系规定了这个符号串可能包含哪些字符， 或者说字符的这种合法组合的模式，也称之为一个词了吧。 比如说在PC当中的这个命题变元， 命题常元和公式的定义，这个就是，实际上就是对于一个字符串它的模式的 一个定义了。 而公理呢，它规定了 几个字符串，这个字符串呢必定是属于这个集合的 或者是说这种字，符号串的一种 模式，一种模式。 比如说PC当中的一个公理，a1，a2，a3
那当然，这个公理呢实际上是一个公理模式，只要符合这个模式 的命题公式，那么它必定都是在这个符号串集合里头的。 那么第三个，推理规则，那么它实际上规定了从这个集合当中已知的符号串 怎么变换，通过这个规则进行变换生成这个集合当中其它符号串的一个方法。 那么比如说PC当中的分离规则。 分离规则也就说如果有A 如果有A蕴涵B，那好，那我就可以把B也加入进去， 这样的。 那么这样呢，这个定理判定 的一个问题，也就是涉及到符号串构造的一个过程的问题， 因为在形式系统当中的定理，也就是在集合当中的这个符号串。 那么定理的证明过程呢，也就是这个符号串的一个构造的过程。 怎么样从公理通过这个 构造的规则，通过推理规则一步步把这个符号串给构造出来？ 那么，但是呢要值得注意的是，这个过程需要， 必定需要在有限的步骤内结束。 当然，如果不是有限的话，那可能这个构造过程就没有意义了
因为你构造构成永远也不会终止，那么它也不能够称之为是一个 构造的过程。 那么 我们给定一个命题公式在PC里头 那么定理的判定问题也就是说 我们要判定它是否是形式系统当中的定理，从而呢能够给出定理的证明。 那么如果用符号串的语言，从符号串的这个角度上来说，那么也就是说我给你一个符号串， 在形式系统当中就要判定这个符号串是不是在属于这个集合里
那么如果你说是，那么要给出这个构造的过程 如果你说不是，你也得给出一个理由，对吧？ 那么我们的问题是，这个定理判定问题 是不是能够单凭形式系统本身的公理和推理规则 就能够在有限步骤内，能够判定一个命题公式它是定理 还是非定理呢？那好我们从一个例子来 看，这个问题呢并不是那么的简单，当然我们举的这个例子是一个很简单的形式系统， 叫做MIU，这个例子呢非常的有趣，它来自一本 很奇特的书，也是很伟大的书啊，叫做《集异璧》 在我们前面课程最开始的时候介绍的这个 Escher的版画、 悖论以及巴哈的音乐，他们之间的 关联和层次缠绕的这些怪圈的问题，统统都来自于这本书。 当然你肯定会感兴趣的，所以我建议呢你去找这本书来看一看 非常值得一看。 好我们回来看这个MIU MIU呢它的符号系统呢，就是由M,I,U这三个字母 组成的一个串。 那么它的初始串呢叫MI 就叫MI，那么就相当于说一个形式系统当中的公理
就一条公理叫MI。 那么它有四条规则 也就是有四个这个推理规则了。 规则一说：如果一个串它
的最后一个符号是I的话，那么我就可以加上一个U，它仍然还是这个 形式系统里头的一个串，那么也就是相当于 从公理的角度上来出发，它推理规则是这样， 就是如果一个xI，这个x呢就可以是任意的字符串 xI是定理，那么xIU也是定理。 第二条规则是说：如果一个串符合， 它是以M开始的，那么就可以把M后边的这些这个x呢给它复制一份 变成Mxx，那当然这个x呢代表任何一个由M,I,U 组成的一个串。 那么从推理规则这个语言 上来说，也就是说，如果Mx是定理，那么Mxx也是 定理，也就是把M后边的这些字符串呢 给它double一下，copy一下放在后边。 好，第三条规则是说：如果一个串当中出现连续3个I， 就可以用一个U来代替这3个I得到一个新的串。 那么从规则的角度上来看，也就是说， xIIIy是y，是定理的话，那么xUy也是定理。 第四条规则：如果一个串当中出现了两个U，就可以把这两个U删掉 得到新的串，也就是说如果xUUy是定理，那么xy也是定理。 那么这有了公理，有了四条规则之后，我们来 判定，提出一个判定的问题，也就是说MU是不是系统当中的串？ 反过来说，也就是说MU它是否是形式系统当中的定理呢？ 那么从 这个角度，从形式系统的角度上来看， 我们实际上是可以由公理出发，再由这个四条这个推理规则， 我们是可以构造出一棵树，就是一棵定理树。 那么这个树的树根呢就是MI，就是它的这个公理， 对吧。 然后呢有MI呢，比如说它可以利用第一条规则 就变成MIU，因为是以 I的I结尾，我们就可以加上一个U 当然我们同样的因为它是这个M打头，我们就可以把后边的这个复制一份 得到MII。 那同样呢，MIU呢它也可以 用第二条规则变成MIUIU。 那么MII呢也可以变成这个MII后面再加一个U。 总之呢，只要符合这个推理规则的这个前件，那么我们总是可以构造出这个定理树来 这个定理树上的每一个节点都是MIU系统里头的一个定理， 一个定理。 那现在呢我们需要 问的问题就是，我们需要找的这个MU到底在不在这棵树上？ 当然我们可以预见到这个树呢，它的层次是无穷的， 它会一直变大下去。 所以呢当然如果 假设MU它是一个定理，我们是可以期望在某一个步骤上 在某一个层次上能够找到它，它就在某一个层次，不管它在多深的层次 不管我们要花多少时间，总会在有限的时间里头找到这个MU。 但是呢如果MU不在这棵树上，那问题就糟糕了， 那你永远也找不到它，而且呢你 不管花了多少时间，你没有找到的话，你还不能够说，它就不是这个 定理，就不是定理，也许它在下一层呢对吧。 所以呢我们说没有办法保证在有限的步骤内 找到这个定理所在的这个位置。 那么还是要问MU到底 是不是定理，它在不在这棵定理树上呢？那么可能 我们来看不单凭这个MIU本身的这个构造
定理树，然后进行搜索，可能已经没有什么太好的办法了。 那么我们就需要另外寻找办法，这个问题呢是可以解决的，但是我们要另外寻找办法， 那么就要求助于这个MIU系统之外的一些定律，这个定律。 比如说 数论，比如说数论。 那既然提到数论，我们就 构造一个跟MIU同构的一个系统310，什么叫同构呢？也就说 它们结构是完全一样的，但是呢只是用了另外的符号来代表，代替这个MIU应用。 我们怎么代替？我们用3来代替M， 用1来代替I，然后用0来代替U。 那么这么一代替之后， 那么从MIU所构成的字符串的集合就变成了
什么？变成了一个自然数的一个集合了。 那既然是自然数的集合，我们就有可能用数论上的一些
结论来讨论这个自然数集合的一些性质。 那好，我们翻译过来，就变成了自然数31在 集合里，这是对应MI。 那么同样也有四个规则，
就比如说在集合中，如果有一个数呢是以1结尾的，那么再填一个0也是集合当中的数。 那么如果说集合有3开头的，把3后边的数字再重复一次，添在 末尾，也是集合当中的数。 那么规则3呢就是如果有 集合，有一个数呢包含了111，把这个111替换成0，
也是集合当中的数。 第四条规则呢就是说如果有 数呢包含了两个0，那么把这两个0划掉，它们还是
集合当中的数。 那么最后呢我们同样问 30，就是30是不是集合当中的数，也就是 回到这个MIU系统，也就还是问MU是不是这个集合当中的？ 那么通过分析这个数的构造规则， 这个数的集合，我们发现，当然这个过程我们就不说了， 我们最终发现这个集合当中的数，它都有一个共同的性质，就是 都不能被3整除，也是一个数论上的性质。 那么为什么呢？首先31它是不能够被3整除的，这是一个公理，它的性质， 其次呢，这四条规则它都没有办法从 不能被3整除的数生成能被3整除的数。 所以呢，我们结合公理和四条规则， 总之呢，这个结合当中的所有的自然数都不能够被3 整除。 而我们要问的这个30，它显然能够被3整除，
所以我们就可以断定说30并不属于这个集合。 要反过来，对照我们MIU系统这个结论，就是 MU不是MIU系统中的定理。 这时呢我们就解决了MIU系统的这个问题。 但是显然这个解决它是依靠系统之外的一个同构 系统来解决的，而且是依靠数论的一些结论来进行解决的。 那么回过头来看这个PC系统 的定理的判定问题。 也就是如果一个符合 PC符号体系定义的命题公式，它是不是PC当中的定理呢？ 那么同样，我们可以预见到 如果仅仅用PC公理，系统当中的公理，三条公理和它 单个的分离规则去构造出类似于MIU系统那样的一个定理数的话， 那么数可以越来越大，越来越深，那么显然也是难以保证，能够在有限的步骤内， 能够判定说，我要证明的这个命题公式是不是在这个数上，是否是定理。 这也是很难的。 但是呢我们说幸运的是呢， 跟MIU系统一样，这个命题也算形式系统PC，也有一个非常重要的一个同构， 我们知道了，这个同构呢，就是它跟我们的逻辑相对应的 一个真值函数，真值函数的运算系统。 那么这样呢只需要用真值表来判定这个命题所对应的真值函数 是不是一个重言式，如果是，那么就可以判定说 这个命题公式肯定是定理，因为PC呢它是有 这个合理性的，那么它一定既有合理性，又有完备性，所以呢
能够判定说它肯定是PC当中的定理，对吧？ 如果它不是重言式的话，那么我们可以马上判定 它一定不是PC当中的定理。 而这里头 很重要一点就是真值表它的运算实际是可以在有限 步骤内完成的，因为我们在前面讨论主范式的时候，我们就可以看到
所有的命题公式，只要包含有n个命题边缘的命题公式。 它的主吸取范式的数量其实是有限的， 是有限的。 这就意味着我们可以在有限的步骤内
把这所有的这个，把命题主析范式的这个真值表给它检验完， 检验完。 只要检验完了以后，只要观察最右边那一列， 如果并不是全1的话，那么我们就可以马上说 这个命题公式它一定不是定理。 当然我们要特别注意的是，这个真值表它并不是PC当中 成分，在形式系统PC里边并没有真值表，它只有 公理，推理，分离规则， 以及命题公式。 真表是在PC当中是不存在的，而是 只存在于真值函数的这个运算系统当中。